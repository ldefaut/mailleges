<?php

namespace App\Entity\User;

use ApiPlatform\Metadata\ApiResource;
use ApiPlatform\Metadata\Get;
use ApiPlatform\Metadata\GetCollection;
use ApiPlatform\Metadata\Post;
use App\Entity\Course;
use App\State\UserPasswordHasher;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping\Entity;
use Doctrine\ORM\Mapping\ManyToMany;

#[ApiResource(
    operations: [
        new Get(),
        new Post(
            processor: UserPasswordHasher::class
        ),
        new GetCollection(),
    ],
    security: "is_granted('ROLE_ADMIN')"
)]
#[Entity]
class Professor extends User
{
    #[ManyToMany(targetEntity: Course::class, mappedBy: 'professor')]
    private Collection $courses;

    public function __construct()
    {
        parent::__construct();
        $this->courses = new ArrayCollection();
    }

    public function getRoles(): array
    {
        $roles = parent::getRoles(); // TODO: Change the autogenerated stub
        $roles[] = 'ROLE_PROFESSOR';

        return array_unique($roles);
    }

    /**
     * @return Collection<int, Course>
     */
    public function getCourses(): Collection
    {
        return $this->courses;
    }

    public function addCourse(Course $course): self
    {
        if (!$this->courses->contains($course)) {
            $this->courses->add($course);
            $course->addProfessor($this);
        }

        return $this;
    }

    public function removeCourse(Course $course): self
    {
        if ($this->courses->removeElement($course)) {
            $course->removeProfessor($this);
        }

        return $this;
    }
}
